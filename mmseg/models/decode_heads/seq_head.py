import torch.nn as nn
import torch.nn.functional as F
from functools import partial
import math
# import torch
# from .layers import trunc_normal_

from ..builder import HEADS
from .decode_head import BaseDecodeHead

from mmcv.cnn import build_norm_layer
from ..utils.positional_encoding import PositionEmbeddingSine
from ..utils.transformer import Transformer, Conv2d
import fvcore.nn.weight_init as weight_init
from mmcv.cnn import ConvModule

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


@HEADS.register_module()
class Seq_Head(BaseDecodeHead):
    """ Vision Transformer with support for patch or hybrid CNN input stage
    """

    def __init__(self, num_queries=1024, hidden_dim=128, img_size=768, embed_dim=1024,
                 norm_layer=partial(nn.LayerNorm, eps=1e-6), norm_cfg=None,
                 num_conv=1, upsampling_method='bilinear', num_upsampe_layer=1, conv3x3_conv1x1=True, **kwargs):
        super(Seq_Head, self).__init__(**kwargs)
        # detr head
        self.num_queries = num_queries
        self.hw = int(math.sqrt(num_queries))
        self.query_embed = nn.Embedding(self.num_queries, hidden_dim)
        N_steps = hidden_dim // 2
        self.pe_layer = PositionEmbeddingSine(N_steps, normalize=True)
        sr_ratio = num_queries // 1024
        self.transformer = Transformer(
            d_model=hidden_dim,
            dropout=0.1,
            nhead=8,
            dim_feedforward=hidden_dim * 4,
            num_encoder_layers=0,
            num_decoder_layers=6,
            normalize_before=False,
            return_intermediate_dec=False,
            sr_ratio=sr_ratio,
        )
        enforce_input_project = False
        if self.in_channels != hidden_dim or enforce_input_project:
            self.input_proj = Conv2d(self.in_channels, hidden_dim, kernel_size=1)
            weight_init.c2_xavier_fill(self.input_proj)
        else:
            self.input_proj = nn.Sequential()

        self.norm = norm_layer(embed_dim)
        self.hidden_dim = hidden_dim
        if hidden_dim != self.channels:
            self.seq_bottleneck = ConvModule(
                    hidden_dim,
                    self.channels,
                    1,
                    conv_cfg=self.conv_cfg,
                    act_cfg=self.act_cfg,
                )

    def forward(self, x):
        x = self._transform_inputs(x)

        if x.dim() == 3:
            if x.shape[1] % 48 != 0:
                x = x[:, 1:]
            x = self.norm(x)

            b, hw, c = x.shape
            h = w = int(math.sqrt(hw))
            x = x.transpose(1, 2).reshape(b, c, h, w)

        pos = self.pe_layer(x)
        src = x
        mask = None
        hs, memory = self.transformer(self.input_proj(src), mask, self.query_embed.weight, pos)
        output = hs[0].reshape(b, self.hw, self.hw, -1).permute(0, -1, 1, 2)
        if self.hidden_dim != self.channels:
            output = self.seq_bottleneck(output)
        output = self.cls_seg(output)

        return output
